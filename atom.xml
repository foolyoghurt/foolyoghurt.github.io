<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[扑爬]]></title>
  <subtitle><![CDATA[Less is more]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://foolyoghurt.github.io/"/>
  <updated>2015-01-16T08:54:48.715Z</updated>
  <id>http://foolyoghurt.github.io/</id>
  
  <author>
    <name><![CDATA[Song]]></name>
    <email><![CDATA[foolyoghurt@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[腾讯前端特工解题报告]]></title>
    <link href="http://foolyoghurt.github.io/2014/02/15/%E8%85%BE%E8%AE%AF%E5%89%8D%E7%AB%AF%E7%89%B9%E5%B7%A5%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://foolyoghurt.github.io/2014/02/15/腾讯前端特工解题报告/</id>
    <published>2014-02-15T06:32:14.000Z</published>
    <updated>2014-02-23T15:09:40.000Z</updated>
    <content type="html"><![CDATA[<p>网站链接：<a href="http://codestar.alloyteam.com/" target="_blank" rel="external">腾讯前端攻略</a></p>
<h2 id="第一关，抓包">第一关，抓包</h2>
<p>提示要抓包，于是查看在chrome查看response header，提示说『请设置隐藏域的值』，于是查了下网页的html代码，发现有一个隐藏域</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"timestamp"</span>&gt;</div></pre></td></tr></table></figure>

<p>于是猜测是要设置timestamp的值，就用Javascript在Chrome控制台中试了一下，果然对了:)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">'timestamp'</span>).value = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</div></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="第二关，CSS绘图">第二关，CSS绘图</h2>
<p>考察用CSS绘制简单的椭圆、三角形。就是考察对<code>border</code>和<code>border-radius</code>的理解以及会用css3中的旋转，没什么可说的，查看w3schools上的文档。不过需要注意的是题目中三角形指出了一定要绕某个点旋转，所以必须指定<code>transform-origin</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 椭圆</span></div><div class="line"><span class="attribute">border-radius</span><span class="value">: <span class="number">50%</span>;</span></div><div class="line"><span class="comment">// 三角形</span></div><div class="line"><span class="attribute">border-color</span><span class="value">: transparent black;</span></div><div class="line">-webkit-<span class="attribute">transform-origin</span><span class="value">: top right;</span></div><div class="line">-webkit-<span class="attribute">transform</span><span class="value">: <span class="function">rotate</span>(-<span class="number">60deg</span>);</span></div></pre></td></tr></table></figure>

<h2 id="第三关，坦克大战">第三关，坦克大战</h2>
<p>这个。。。涉及到游戏，真的是没有兴趣也压根不会，所以果断去网上找了一个代码，涉及到版权，就不贴出来了。。。</p>
<h2 id="第四关，JS基础">第四关，JS基础</h2>
<p>第四题是最简单的一道，就是javascript的一些基本的使用方法，也就是语法，分三道题全是填空，下面&lt;&gt;表示要填的空</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 1. 数组克隆（数组元素非引用类型） */</span></div><div class="line"><span class="keyword">var</span> <span class="keyword">clone</span> = <span class="function"><span class="keyword">function</span><span class="params">(arr)</span></span>{</div><div class="line">    <span class="keyword">return</span> &lt;&gt;</div><div class="line">};</div><div class="line"><span class="comment">// 答案：arr.slice()</span></div><div class="line"></div><div class="line"><span class="comment">/* 2. 去除字符串首尾空格 */</span></div><div class="line"><span class="keyword">var</span> trim = <span class="function"><span class="keyword">function</span><span class="params">(s)</span></span>{</div><div class="line">    <span class="keyword">return</span> &lt;&gt;</div><div class="line">};</div><div class="line"><span class="comment">// 答案：s.trim()</span></div><div class="line"></div><div class="line"><span class="comment">/* 3. 将Nodelist对象转换为数组对象 */</span></div><div class="line"><span class="keyword">var</span> arrify = <span class="function"><span class="keyword">function</span><span class="params">(list)</span></span>{</div><div class="line">    <span class="keyword">return</span> &lt;&gt;</div><div class="line">};</div><div class="line"><span class="comment">// 答案：Array.prototype.slice.call(list)</span></div></pre></td></tr></table></figure>

<h2 id="第五关，求最大值">第五关，求最大值</h2>
<p>这是最有意思的一个题，综合了DOM操作、算法方面的知识。由于是求最值，设<code>r[i][j]</code>为第0层到第i层的第j个节点的数字和的最大值（i和j均从0开始计数），data[i][j]为第i行j列的数字值，则</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r[<span class="link_label">i</span>][<span class="link_reference">j</span>] = max(r[<span class="link_label">i-1</span>][<span class="link_reference">j-1</span>], r[<span class="link_label">i-1</span>][<span class="link_reference">j</span>]) + data[<span class="link_label">i</span>][<span class="link_reference">j</span>]  // i &gt; 0, i &gt; j &gt; 0,</div><div class="line">r[<span class="link_label">i</span>][<span class="link_reference">j</span>] = r[<span class="link_label">i-1</span>][<span class="link_reference">0</span>] + data[<span class="link_label">i</span>][<span class="link_reference">j</span>]                    // i &gt; 0, j = 0</div><div class="line">r[<span class="link_label">i</span>][<span class="link_reference">j</span>] = r[<span class="link_label">i-1</span>][<span class="link_reference">i-1</span>] + data[<span class="link_label">i</span>][<span class="link_reference">j</span>]                  // i &gt; 0, j = i</div></pre></td></tr></table></figure>

<p>然后为了输出路径，倒序遍历r数组，倒序输出节点，并在图中选中节点。为了方便，引入jquery，方便对DOM树的操作。时间空间复杂度均为<code>O(N)</code>，N是节点数，如果不是因为要自动选中图中的节点，而选中节点是又必须是从第二层开始<strong>依次序</strong>逐层选中的话，空间复杂度可以是O(n)，n为最后一层的节点数。以下是代码实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入jquery，以便使用jquery操作DOM。贴代码是要先贴这一段再贴其他的，以免jquery库还未加载完毕</span></div><div class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">s.src = <span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(s);</div><div class="line"></div><div class="line"><span class="keyword">var</span> record = [[+$($(<span class="string">'#box&gt;div&gt;span'</span>)[<span class="number">0</span>]).text()]];</div><div class="line"><span class="keyword">var</span> $rows = $(<span class="string">'#box&gt;div'</span>);</div><div class="line"><span class="comment">// 行</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; $rows.length; i++) {</div><div class="line">    <span class="keyword">var</span> row = $rows[i]</div><div class="line">    <span class="keyword">var</span> $cols = $(row).children(<span class="string">'span'</span>)</div><div class="line">    record.push([])</div><div class="line">    <span class="comment">// 列</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; $cols.length; j++) {</div><div class="line">        <span class="keyword">var</span> num = +$($cols[j]).text()</div><div class="line">        <span class="keyword">switch</span> (j) {</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>: record[i][j] = record[i-<span class="number">1</span>][<span class="number">0</span>] + num;<span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> i: record[i][j] = record[i-<span class="number">1</span>][i-<span class="number">1</span>] + num;<span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>: record[i][j] = <span class="built_in">Math</span>.max(record[i-<span class="number">1</span>][j-<span class="number">1</span>], record[i-<span class="number">1</span>][j]) + num;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// 找到产生最大值的路径中最深层次的节点的下标</span></div><div class="line"><span class="keyword">var</span> max = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">1</span>; k &lt; record[i-<span class="number">1</span>].length; k++) {</div><div class="line">    <span class="keyword">if</span> (record[i-<span class="number">1</span>][k] &gt; record[i-<span class="number">1</span>][max]) {</div><div class="line">        max = k</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="keyword">var</span> path = []</div><div class="line"><span class="comment">// 从第一层节点到当前层节点数字之和的最大值</span></div><div class="line"><span class="keyword">var</span> sum = record[i-<span class="number">1</span>][max]</div><div class="line"></div><div class="line"><span class="comment">// 从倒数第二层开始往回遍历，倒序输出路径</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = record.length-<span class="number">1</span>; i--;) {</div><div class="line">    <span class="keyword">var</span> r = record[i]</div><div class="line">    <span class="keyword">var</span> a = max ? r[max-<span class="number">1</span>] : -<span class="number">1</span></div><div class="line">    <span class="keyword">var</span> b = (max == i+<span class="number">1</span>) ? -<span class="number">1</span> : r[max]</div><div class="line">    <span class="keyword">var</span> t = max</div><div class="line">    <span class="comment">// 最大值路径在当前层中的节点下标</span></div><div class="line">    <span class="keyword">if</span> (a &gt; b) {</div><div class="line">        max--;</div><div class="line">    }</div><div class="line">    <span class="comment">// 实际存的是上一层的节点</span></div><div class="line">    path.push([t, sum - r[max]])</div><div class="line">    sum = r[max]</div><div class="line">}</div><div class="line"><span class="comment">// 选中图中的节点</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; $rows.length; i++) {</div><div class="line">    <span class="keyword">var</span> node = path.pop()</div><div class="line">    $($(<span class="string">'#box'</span>).children(<span class="string">'#row_'</span> + i).children()[node[<span class="number">0</span>]]).click()</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%d -&gt; %d'</span>, i, node[<span class="number">1</span>])</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>网站链接：<a href="http://codestar.alloyteam.com/" target="_blank" rel="external">腾讯前端攻略</a></p>
<h2 id="第一关，抓包">第一关，抓包</h2>
<p>提示要抓包，于是查看在chrome查看response header，提示说『请设置隐藏域的值』，于是查了下网页的html代码，发现有一个隐藏域</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> name=<span class="string">"timestamp"</span>&gt;</div></pre></td></tr></table></figure>

<p>于是猜测是要设置timestamp的值，就用Javascript在Chrome控制台中试了一下，果然对了:)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">'timestamp'</span>).value = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="css" scheme="http://foolyoghurt.github.io/tags/css/"/>
    
      <category term="js" scheme="http://foolyoghurt.github.io/tags/js/"/>
    
      <category term="前端" scheme="http://foolyoghurt.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://foolyoghurt.github.io/2013/07/26/hello-world/"/>
    <id>http://foolyoghurt.github.io/2013/07/26/hello-world/</id>
    <published>2013-07-26T06:32:14.000Z</published>
    <updated>2014-02-24T17:00:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="为什么搭博客">为什么搭博客</h2>
<p>今天看到同学 <a href="http://brotherb.info/" target="_blank" rel="external">Brotherb</a> 搭了一个博客，感觉挺好玩的，点进去一看发现界面<strong>简洁干净</strong>，看着让人感觉很舒服。于是自己按照给的参考资料，再配合无所不能的Google也搭了一个，感觉很棒。博客的搭建很简单也基本顺利，主要是参考资料比较全，<code>还有就是linux下安装软件比较方便，如果是Windows，估计又得折腾半天还不见得能搞定</code>。ps：其实windows也很简单，我现在就是用的windows，之前纯属下意识的偏见。<br><a id="more"></a></p>
<h2 id="为什么是hexo">为什么是hexo</h2>
<p><code>WordPress</code>以前用过，功能很全，大概是我所知道的博客中最全的了吧，里面可以安装一堆好玩的插件、主题，适合各种DIY。然而搭博客的目的应该是写博客，而用WordPress时感觉自己主要精力不在写博客上，而是在于怎么去<strong>折腾</strong>它，尝试各种主题安装各种插件，这就有点<strong>本末倒置</strong>了，所以后来折腾够了就再没有管过它了，因为精力都耗尽了（也可以说好奇心都耗尽了）。甚至当一段时间后放在BAE上的wordpress博客莫名其妙的不能用了，自己也懒得管了。并且wordpress后台管理系统的速度真心慢，查看它的源代码，发布一篇文章，调用几十个函数对这篇文章内容进行处理然后才能存入数据库，对于所使用的网络并不快的我来说感觉太笨重了。</p>
<p><code>Octorpress</code>也试过，但不知怎么回事，安装的时候出了有点诡异的问题，然后去网上搜了下还是没解决，一怒之下就果断放弃了，这次我选择了<strong>不折腾</strong>。而<code>Hexo</code>就没这些蛋疼的问题，不仅指安装配置的过程，而且是界面风格。Hexo简洁的风格让人更关注内容，并且采用<code>Markdown</code>来书写文章。对于书写所使用的语法，Word的排版经常容易错乱且太复杂，用html的话一个个的标签输入起来又太麻烦，无格式的纯文本阅读起来又不方便，Markdown刚好在其之间找到了<strong>平衡点</strong>，优雅简洁、学习成本也低。关于Markdown的编辑器，可以在线使用 <a href="http://ghosertblog.github.io/mdeditor/" target="_blank" rel="external">mdeditor</a> 或者 <a href="http://benweet.github.io/stackedit/" target="_blank" rel="external">stackedit</a>，或者clone到本地使用，用这种网页编辑器还解决了跨平台的问题。关于Markdown推荐阅读 <a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="external">Markdown写作浅谈</a>。</p>
<h2 id="不用数据库靠谱吗">不用数据库靠谱吗</h2>
<h3 id="管理方便">管理方便</h3>
<p>Hexo没有用到数据库，而是生成一些静态的html文件，以一定的目录树结构组织好。咋一看感觉有些别扭，网站怎么能没有数据库呢？纯HTML也太低端了吧？数据库是为了管理方便提出来的，现在不用感觉是历史在开倒车。其实不然，因为对于个人博客，一般写的文章并不多，就我而言，平均每周一两篇就足够了。这样算一年也才大概50-100篇文章，十年500-1000，hexo有足够能力组织好这些文件，对于这点规模的文章数量来说不用数据库也能很好的组织管理。</p>
<h3 id="快速检索">快速检索</h3>
<p>以文件存储的另一个好处是方便检索，Linux下自带有有<code>find</code>、<code>grep</code>等命令，想要查找文件或文件的内容很方便，即使有点复杂的需要通常一个<strong>正则表达式</strong>就能搞定（当然，这主要适合程序员），检索的效率也是很高的。比较遗憾的是数据库是不支持正则表达式这个伟大的工具的。另外，需要添加、删除、移动某些文章的时候，直接去目录下增加、移动、删除源文件，或者复杂一些的需求可以配合grep等工具查找到特定的文件用shell命令增删改。需要按日期、名称排序也只需要在文件管理器中选择按日期或名称排序即可。</p>
<h3 id="数据迁移及备份">数据迁移及备份</h3>
<p>数据的迁移备份也是经常会碰到的，比如更换了博客系统、数据库。如果使用数据库，就需要导出导入数据，可能还要转换格式。对于hexo这种直接以文本文件的方式存储数据的，只需要<code>Ctrl+C</code>和<code>Ctrl+V</code>就可以迁移备份数据了，并且无论程序软件如何升级变化，纯文本数据都能很容易被解析。而数据库则需要导入导出，或许还要考虑进去中文编码问题，以及不同数据库间导入导出的格式的兼容问题等等。所以，对于一年写不了几篇文章的小型个人博客，我觉得用数据库实在是「杀鸡用牛刀」，不值得也不推荐。</p>
<h2 id="缺点">缺点</h2>
<p>当然，任何东西都不是十全十美的，hexo也有缺点。比如没有像WordPress那样方便强大的管理页面，对单个文章，特别是文章的元数据诸如分类、标签等的修改没有那么方便。每次改完文章，都需要重新运行一遍生成静态的HTML然后提交到网上是有点麻烦，有时候可能仅仅就改一个文章的分类名，但是操作流程与新写一篇文章是差不多的。无后台管理，成也萧何，败也萧何。</p>
<p>还有就是对没有计算机相关基础的人来说，可能不大适合，上面提到的find、grep、正则表达式等都需要一定的计算机基础，所以是有一定的入门门槛的。</p>
<p>最后推荐下刘未鹏大神的 <a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="external">为什么你应该（从现在开始就）写博客</a>，望与诸君共勉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="为什么搭博客">为什么搭博客</h2>
<p>今天看到同学 <a href="http://brotherb.info/" target="_blank" rel="external">Brotherb</a> 搭了一个博客，感觉挺好玩的，点进去一看发现界面<strong>简洁干净</strong>，看着让人感觉很舒服。于是自己按照给的参考资料，再配合无所不能的Google也搭了一个，感觉很棒。博客的搭建很简单也基本顺利，主要是参考资料比较全，<code>还有就是linux下安装软件比较方便，如果是Windows，估计又得折腾半天还不见得能搞定</code>。ps：其实windows也很简单，我现在就是用的windows，之前纯属下意识的偏见。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://foolyoghurt.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://foolyoghurt.github.io/categories/hexo/"/>
    
  </entry>
  
</feed>
